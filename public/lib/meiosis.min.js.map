{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///meiosis.min.js","webpack:///webpack/bootstrap 2e2fce801c63440f299a","webpack:///./src/index.ts","webpack:///./src/meiosis.ts","webpack:///./~/flyd/lib/index.js","webpack:///./~/ramda/src/curryN.js","webpack:///./~/ramda/src/internal/_arity.js","webpack:///./~/ramda/src/internal/_curry1.js","webpack:///./~/ramda/src/internal/_isPlaceholder.js","webpack:///./~/ramda/src/internal/_curry2.js","webpack:///./~/ramda/src/internal/_curryN.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","__export","hasOwnProperty","newInstance","propose","stream","run","params","initialModel","scanner","Error","streams","allStreams","scannerName","getName","scannerFn","getFn","lastStream","scan","scannerStream","push","name","mappers","forEach","mapper","mapperName","mapperFn","map","render","nextAction","lastProposal_1","on","value","proposal","devtool","window","copy_1","copy","model","JSON","parse","stringify","bufferedValues_1","devtoolInitialized_1","lastProposal_2","sendValues_1","addEventListener","evt","data","type","sendValuesBack","values","postMessage","update","namedStream","unshift","flyd","combine","merge","undefined","Object","keys","instance","isFunction","obj","constructor","apply","trueFn","fn","i","s","deps","depEndStreams","endStream","createDependentStream","length","end","depsChanged","fnArgs","concat","listeners","addListeners","updateStream","boundMap","f","ap","s2","s1","self","val","streamToString","createStream","n","arguments","updateStreamValue","hasVal","vals","queued","of","toString","depsMet","shouldUpdate","initialDepsNotMet","every","inStream","toUpdate","returnVal","flushing","flushUpdate","updateDeps","o","list","findDeps","orderNextIdx","order","shift","then","markListeners","lists","removeListener","idx","indexOf","detachDeps","StreamTransformer","curryN","initialValue","isStream","immediate","endsOn","endS","acc","ns","changed","transduce","xform","source","res","prototype","v","_arity","_curry1","_curry2","_curryN","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","_isPlaceholder","f1","a","f2","b","_b","_a","received","combined","argsIdx","left","combinedIdx","result"],"mappings":"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","file":"meiosis.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"meiosis\"] = factory();\n\telse\n\t\troot[\"meiosis\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"meiosis\"] = factory();\n\telse\n\t\troot[\"meiosis\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\t__export(__webpack_require__(1));\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar flyd = __webpack_require__(2);\n\texports.combine = flyd.combine, exports.map = flyd.map, exports.merge = flyd.merge, exports.on = flyd.on, exports.scan = flyd.scan, exports.stream = flyd.stream;\n\tvar getName = function (value) { return typeof value === \"function\" ? undefined : Object.keys(value)[0]; };\n\tvar getFn = function (value) {\n\t    var name = getName(value);\n\t    return name ? value[name] : value;\n\t};\n\tfunction newInstance() {\n\t    var propose = exports.stream();\n\t    var run = function (params) {\n\t        if (!params.initialModel || !params.scanner) {\n\t            throw new Error(\"Please specify initialModel and scanner.\");\n\t        }\n\t        var streams = {};\n\t        var allStreams = [];\n\t        var scanner = params.scanner;\n\t        var scannerName = getName(scanner);\n\t        var scannerFn = getFn(scanner);\n\t        var lastStream = exports.scan(scannerFn, params.initialModel, propose);\n\t        var scannerStream = lastStream;\n\t        scannerName && (streams[scannerName] = lastStream);\n\t        allStreams.push({ name: (scannerName || \"\"), stream: lastStream });\n\t        (params.mappers || []).forEach(function (mapper) {\n\t            var mapperName = getName(mapper);\n\t            var mapperFn = getFn(mapper);\n\t            lastStream = exports.map(mapperFn, lastStream);\n\t            mapperName && (streams[mapperName] = lastStream);\n\t            allStreams.push({ name: (mapperName || \"\"), stream: lastStream });\n\t        });\n\t        var render = exports.stream();\n\t        if (params.nextAction) {\n\t            var lastProposal_1 = propose();\n\t            exports.on(function (value) {\n\t                var proposal = propose();\n\t                render(value);\n\t                if (proposal !== lastProposal_1) {\n\t                    params.nextAction(value, proposal);\n\t                }\n\t                lastProposal_1 = proposal;\n\t            }, lastStream);\n\t        }\n\t        else {\n\t            exports.on(render, lastStream);\n\t        }\n\t        streams[\"render\"] = render;\n\t        var devtool = !!window;\n\t        if (devtool) {\n\t            var copy_1 = params.copy || (function (model) { return JSON.parse(JSON.stringify(model)); });\n\t            var bufferedValues_1 = [];\n\t            var devtoolInitialized_1 = false;\n\t            var lastProposal_2 = propose();\n\t            var sendValues_1 = exports.stream(true);\n\t            window.addEventListener(\"message\", function (evt) {\n\t                if (evt.data.type === \"MEIOSIS_RENDER_MODEL\") {\n\t                    sendValues_1(evt.data.sendValuesBack);\n\t                    scannerStream(evt.data.model);\n\t                }\n\t                else if (evt.data.type === \"MEIOSIS_TRACER_INIT\") {\n\t                    devtoolInitialized_1 = true;\n\t                    bufferedValues_1.forEach(function (values) { return window.postMessage({ type: \"MEIOSIS_VALUES\", values: values }, \"*\"); });\n\t                }\n\t            });\n\t            exports.on(function () {\n\t                var proposal = propose();\n\t                var update = proposal !== lastProposal_2;\n\t                lastProposal_2 = proposal;\n\t                var values = allStreams.map(function (namedStream) {\n\t                    return ({ name: namedStream.name, value: copy_1(namedStream.stream()) });\n\t                });\n\t                values.unshift({ name: \"proposal\", value: proposal });\n\t                if (sendValues_1()) {\n\t                    if (devtoolInitialized_1) {\n\t                        window.postMessage({ type: \"MEIOSIS_VALUES\", values: values, update: update }, \"*\");\n\t                    }\n\t                    else {\n\t                        bufferedValues_1.push(values);\n\t                    }\n\t                }\n\t            }, lastStream);\n\t        }\n\t        return streams;\n\t    };\n\t    return {\n\t        propose: propose,\n\t        run: run\n\t    };\n\t}\n\texports.newInstance = newInstance;\n\tvar instance = newInstance();\n\tvar propose = instance.propose;\n\texports.propose = propose;\n\tvar run = instance.run;\n\texports.run = run;\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar curryN = __webpack_require__(3);\n\t\n\t// Utility\n\tfunction isFunction(obj) {\n\t  return !!(obj && obj.constructor && obj.call && obj.apply);\n\t}\n\tfunction trueFn() { return true; }\n\t\n\t// Globals\n\tvar toUpdate = [];\n\tvar inStream;\n\tvar order = [];\n\tvar orderNextIdx = -1;\n\tvar flushing = false;\n\t\n\t/** @namespace */\n\tvar flyd = {}\n\t\n\t// /////////////////////////// API ///////////////////////////////// //\n\t\n\t/**\n\t * Creates a new stream\n\t *\n\t * __Signature__: `a -> Stream a`\n\t *\n\t * @name flyd.stream\n\t * @param {*} initialValue - (Optional) the initial value of the stream\n\t * @return {stream} the stream\n\t *\n\t * @example\n\t * var n = flyd.stream(1); // Stream with initial value `1`\n\t * var s = flyd.stream(); // Stream with no initial value\n\t */\n\tflyd.stream = function(initialValue) {\n\t  var endStream = createDependentStream([], trueFn);\n\t  var s = createStream();\n\t  s.end = endStream;\n\t  s.fnArgs = [];\n\t  endStream.listeners.push(s);\n\t  if (arguments.length > 0) s(initialValue);\n\t  return s;\n\t}\n\t\n\t/**\n\t * Create a new dependent stream\n\t *\n\t * __Signature__: `(...Stream * -> Stream b -> b) -> [Stream *] -> Stream b`\n\t *\n\t * @name flyd.combine\n\t * @param {Function} fn - the function used to combine the streams\n\t * @param {Array<stream>} dependencies - the streams that this one depends on\n\t * @return {stream} the dependent stream\n\t *\n\t * @example\n\t * var n1 = flyd.stream(0);\n\t * var n2 = flyd.stream(0);\n\t * var max = flyd.combine(function(n1, n2, self, changed) {\n\t *   return n1() > n2() ? n1() : n2();\n\t * }, [n1, n2]);\n\t */\n\tflyd.combine = curryN(2, combine);\n\tfunction combine(fn, streams) {\n\t  var i, s, deps, depEndStreams;\n\t  var endStream = createDependentStream([], trueFn);\n\t  deps = []; depEndStreams = [];\n\t  for (i = 0; i < streams.length; ++i) {\n\t    if (streams[i] !== undefined) {\n\t      deps.push(streams[i]);\n\t      if (streams[i].end !== undefined) depEndStreams.push(streams[i].end);\n\t    }\n\t  }\n\t  s = createDependentStream(deps, fn);\n\t  s.depsChanged = [];\n\t  s.fnArgs = s.deps.concat([s, s.depsChanged]);\n\t  s.end = endStream;\n\t  endStream.listeners.push(s);\n\t  addListeners(depEndStreams, endStream);\n\t  endStream.deps = depEndStreams;\n\t  updateStream(s);\n\t  return s;\n\t}\n\t\n\t/**\n\t * Returns `true` if the supplied argument is a Flyd stream and `false` otherwise.\n\t *\n\t * __Signature__: `* -> Boolean`\n\t *\n\t * @name flyd.isStream\n\t * @param {*} value - the value to test\n\t * @return {Boolean} `true` if is a Flyd streamn, `false` otherwise\n\t *\n\t * @example\n\t * var s = flyd.stream(1);\n\t * var n = 1;\n\t * flyd.isStream(s); //=> true\n\t * flyd.isStream(n); //=> false\n\t */\n\tflyd.isStream = function(stream) {\n\t  return isFunction(stream) && 'hasVal' in stream;\n\t}\n\t\n\t/**\n\t * Invokes the body (the function to calculate the value) of a dependent stream\n\t *\n\t * By default the body of a dependent stream is only called when all the streams\n\t * upon which it depends has a value. `immediate` can circumvent this behaviour.\n\t * It immediately invokes the body of a dependent stream.\n\t *\n\t * __Signature__: `Stream a -> Stream a`\n\t *\n\t * @name flyd.immediate\n\t * @param {stream} stream - the dependent stream\n\t * @return {stream} the same stream\n\t *\n\t * @example\n\t * var s = flyd.stream();\n\t * var hasItems = flyd.immediate(flyd.combine(function(s) {\n\t *   return s() !== undefined && s().length > 0;\n\t * }, [s]);\n\t * console.log(hasItems()); // logs `false`. Had `immediate` not been\n\t *                          // used `hasItems()` would've returned `undefined`\n\t * s([1]);\n\t * console.log(hasItems()); // logs `true`.\n\t * s([]);\n\t * console.log(hasItems()); // logs `false`.\n\t */\n\tflyd.immediate = function(s) {\n\t  if (s.depsMet === false) {\n\t    s.depsMet = true;\n\t    updateStream(s);\n\t  }\n\t  return s;\n\t}\n\t\n\t/**\n\t * Changes which `endsStream` should trigger the ending of `s`.\n\t *\n\t * __Signature__: `Stream a -> Stream b -> Stream b`\n\t *\n\t * @name flyd.endsOn\n\t * @param {stream} endStream - the stream to trigger the ending\n\t * @param {stream} stream - the stream to be ended by the endStream\n\t * @param {stream} the stream modified to be ended by endStream\n\t *\n\t * @example\n\t * var n = flyd.stream(1);\n\t * var killer = flyd.stream();\n\t * // `double` ends when `n` ends or when `killer` emits any value\n\t * var double = flyd.endsOn(flyd.merge(n.end, killer), flyd.combine(function(n) {\n\t *   return 2 * n();\n\t * }, [n]);\n\t*/\n\tflyd.endsOn = function(endS, s) {\n\t  detachDeps(s.end);\n\t  endS.listeners.push(s.end);\n\t  s.end.deps.push(endS);\n\t  return s;\n\t}\n\t\n\t/**\n\t * Map a stream\n\t *\n\t * Returns a new stream consisting of every value from `s` passed through\n\t * `fn`. I.e. `map` creates a new stream that listens to `s` and\n\t * applies `fn` to every new value.\n\t * __Signature__: `(a -> result) -> Stream a -> Stream result`\n\t *\n\t * @name flyd.map\n\t * @param {Function} fn - the function that produces the elements of the new stream\n\t * @param {stream} stream - the stream to map\n\t * @return {stream} a new stream with the mapped values\n\t *\n\t * @example\n\t * var numbers = flyd.stream(0);\n\t * var squaredNumbers = flyd.map(function(n) { return n*n; }, numbers);\n\t */\n\t// Library functions use self callback to accept (null, undefined) update triggers.\n\tflyd.map = curryN(2, function(f, s) {\n\t  return combine(function(s, self) { self(f(s.val)); }, [s]);\n\t})\n\t\n\t/**\n\t * Listen to stream events\n\t *\n\t * Similar to `map` except that the returned stream is empty. Use `on` for doing\n\t * side effects in reaction to stream changes. Use the returned stream only if you\n\t * need to manually end it.\n\t *\n\t * __Signature__: `(a -> result) -> Stream a -> Stream undefined`\n\t *\n\t * @name flyd.on\n\t * @param {Function} cb - the callback\n\t * @param {stream} stream - the stream\n\t * @return {stream} an empty stream (can be ended)\n\t */\n\tflyd.on = curryN(2, function(f, s) {\n\t  return combine(function(s) { f(s.val); }, [s]);\n\t})\n\t\n\t/**\n\t * Creates a new stream with the results of calling the function on every incoming\n\t * stream with and accumulator and the incoming value.\n\t *\n\t * __Signature__: `(a -> b -> a) -> a -> Stream b -> Stream a`\n\t *\n\t * @name flyd.scan\n\t * @param {Function} fn - the function to call\n\t * @param {*} val - the initial value of the accumulator\n\t * @param {stream} stream - the stream source\n\t * @return {stream} the new stream\n\t *\n\t * @example\n\t * var numbers = flyd.stream();\n\t * var sum = flyd.scan(function(sum, n) { return sum+n; }, 0, numbers);\n\t * numbers(2)(3)(5);\n\t * sum(); // 10\n\t */\n\tflyd.scan = curryN(3, function(f, acc, s) {\n\t  var ns = combine(function(s, self) {\n\t    self(acc = f(acc, s.val));\n\t  }, [s]);\n\t  if (!ns.hasVal) ns(acc);\n\t  return ns;\n\t});\n\t\n\t/**\n\t * Creates a new stream down which all values from both `stream1` and `stream2`\n\t * will be sent.\n\t *\n\t * __Signature__: `Stream a -> Stream a -> Stream a`\n\t *\n\t * @name flyd.merge\n\t * @param {stream} source1 - one stream to be merged\n\t * @param {stream} source2 - the other stream to be merged\n\t * @return {stream} a stream with the values from both sources\n\t *\n\t * @example\n\t * var btn1Clicks = flyd.stream();\n\t * button1Elm.addEventListener(btn1Clicks);\n\t * var btn2Clicks = flyd.stream();\n\t * button2Elm.addEventListener(btn2Clicks);\n\t * var allClicks = flyd.merge(btn1Clicks, btn2Clicks);\n\t */\n\tflyd.merge = curryN(2, function(s1, s2) {\n\t  var s = flyd.immediate(combine(function(s1, s2, self, changed) {\n\t    if (changed[0]) {\n\t      self(changed[0]());\n\t    } else if (s1.hasVal) {\n\t      self(s1.val);\n\t    } else if (s2.hasVal) {\n\t      self(s2.val);\n\t    }\n\t  }, [s1, s2]));\n\t  flyd.endsOn(combine(function() {\n\t    return true;\n\t  }, [s1.end, s2.end]), s);\n\t  return s;\n\t});\n\t\n\t/**\n\t * Creates a new stream resulting from applying `transducer` to `stream`.\n\t *\n\t * __Signature__: `Transducer -> Stream a -> Stream b`\n\t *\n\t * @name flyd.transduce\n\t * @param {Transducer} xform - the transducer transformation\n\t * @param {stream} source - the stream source\n\t * @return {stream} the new stream\n\t *\n\t * @example\n\t * var t = require('transducers.js');\n\t *\n\t * var results = [];\n\t * var s1 = flyd.stream();\n\t * var tx = t.compose(t.map(function(x) { return x * 2; }), t.dedupe());\n\t * var s2 = flyd.transduce(tx, s1);\n\t * flyd.combine(function(s2) { results.push(s2()); }, [s2]);\n\t * s1(1)(1)(2)(3)(3)(3)(4);\n\t * results; // => [2, 4, 6, 8]\n\t */\n\tflyd.transduce = curryN(2, function(xform, source) {\n\t  xform = xform(new StreamTransformer());\n\t  return combine(function(source, self) {\n\t    var res = xform['@@transducer/step'](undefined, source.val);\n\t    if (res && res['@@transducer/reduced'] === true) {\n\t      self.end(true);\n\t      return res['@@transducer/value'];\n\t    } else {\n\t      return res;\n\t    }\n\t  }, [source]);\n\t});\n\t\n\t/**\n\t * Returns `fn` curried to `n`. Use this function to curry functions exposed by\n\t * modules for Flyd.\n\t *\n\t * @name flyd.curryN\n\t * @function\n\t * @param {Integer} arity - the function arity\n\t * @param {Function} fn - the function to curry\n\t * @return {Function} the curried function\n\t *\n\t * @example\n\t * function add(x, y) { return x + y; };\n\t * var a = flyd.curryN(2, add);\n\t * a(2)(4) // => 6\n\t */\n\tflyd.curryN = curryN\n\t\n\t/**\n\t * Returns a new stream identical to the original except every\n\t * value will be passed through `f`.\n\t *\n\t * _Note:_ This function is included in order to support the fantasy land\n\t * specification.\n\t *\n\t * __Signature__: Called bound to `Stream a`: `(a -> b) -> Stream b`\n\t *\n\t * @name stream.map\n\t * @param {Function} function - the function to apply\n\t * @return {stream} a new stream with the values mapped\n\t *\n\t * @example\n\t * var numbers = flyd.stream(0);\n\t * var squaredNumbers = numbers.map(function(n) { return n*n; });\n\t */\n\tfunction boundMap(f) { return flyd.map(f, this); }\n\t\n\t/**\n\t * Returns a new stream which is the result of applying the\n\t * functions from `this` stream to the values in `stream` parameter.\n\t *\n\t * `this` stream must be a stream of functions.\n\t *\n\t * _Note:_ This function is included in order to support the fantasy land\n\t * specification.\n\t *\n\t * __Signature__: Called bound to `Stream (a -> b)`: `a -> Stream b`\n\t *\n\t * @name stream.ap\n\t * @param {stream} stream - the values stream\n\t * @return {stream} a new stram with the functions applied to values\n\t *\n\t * @example\n\t * var add = flyd.curryN(2, function(x, y) { return x + y; });\n\t * var numbers1 = flyd.stream();\n\t * var numbers2 = flyd.stream();\n\t * var addToNumbers1 = flyd.map(add, numbers1);\n\t * var added = addToNumbers1.ap(numbers2);\n\t */\n\tfunction ap(s2) {\n\t  var s1 = this;\n\t  return combine(function(s1, s2, self) { self(s1.val(s2.val)); }, [s1, s2]);\n\t}\n\t\n\t/**\n\t * Get a human readable view of a stream\n\t * @name stream.toString\n\t * @return {String} the stream string representation\n\t */\n\tfunction streamToString() {\n\t  return 'stream(' + this.val + ')';\n\t}\n\t\n\t/**\n\t * @name stream.end\n\t * @memberof stream\n\t * A stream that emits `true` when the stream ends. If `true` is pushed down the\n\t * stream the parent stream ends.\n\t */\n\t\n\t/**\n\t * @name stream.of\n\t * @function\n\t * @memberof stream\n\t * Returns a new stream with `value` as its initial value. It is identical to\n\t * calling `flyd.stream` with one argument.\n\t *\n\t * __Signature__: Called bound to `Stream (a)`: `b -> Stream b`\n\t *\n\t * @param {*} value - the initial value\n\t * @return {stream} the new stream\n\t *\n\t * @example\n\t * var n = flyd.stream(1);\n\t * var m = n.of(1);\n\t */\n\t\n\t// /////////////////////////// PRIVATE ///////////////////////////////// //\n\t/**\n\t * @private\n\t * Create a stream with no dependencies and no value\n\t * @return {Function} a flyd stream\n\t */\n\tfunction createStream() {\n\t  function s(n) {\n\t    if (arguments.length === 0) return s.val\n\t    updateStreamValue(s, n)\n\t    return s\n\t  }\n\t  s.hasVal = false;\n\t  s.val = undefined;\n\t  s.vals = [];\n\t  s.listeners = [];\n\t  s.queued = false;\n\t  s.end = undefined;\n\t  s.map = boundMap;\n\t  s.ap = ap;\n\t  s.of = flyd.stream;\n\t  s.toString = streamToString;\n\t  return s;\n\t}\n\t\n\t/**\n\t * @private\n\t * Create a dependent stream\n\t * @param {Array<stream>} dependencies - an array of the streams\n\t * @param {Function} fn - the function used to calculate the new stream value\n\t * from the dependencies\n\t * @return {stream} the created stream\n\t */\n\tfunction createDependentStream(deps, fn) {\n\t  var s = createStream();\n\t  s.fn = fn;\n\t  s.deps = deps;\n\t  s.depsMet = false;\n\t  s.depsChanged = deps.length > 0 ? [] : undefined;\n\t  s.shouldUpdate = false;\n\t  addListeners(deps, s);\n\t  return s;\n\t}\n\t\n\t/**\n\t * @private\n\t * Check if all the dependencies have values\n\t * @param {stream} stream - the stream to check depencencies from\n\t * @return {Boolean} `true` if all dependencies have vales, `false` otherwise\n\t */\n\tfunction initialDepsNotMet(stream) {\n\t  stream.depsMet = stream.deps.every(function(s) {\n\t    return s.hasVal;\n\t  });\n\t  return !stream.depsMet;\n\t}\n\t\n\t/**\n\t * @private\n\t * Update a dependent stream using its dependencies in an atomic way\n\t * @param {stream} stream - the stream to update\n\t */\n\tfunction updateStream(s) {\n\t  if ((s.depsMet !== true && initialDepsNotMet(s)) ||\n\t      (s.end !== undefined && s.end.val === true)) return;\n\t  if (inStream !== undefined) {\n\t    toUpdate.push(s);\n\t    return;\n\t  }\n\t  inStream = s;\n\t  if (s.depsChanged) s.fnArgs[s.fnArgs.length - 1] = s.depsChanged;\n\t  var returnVal = s.fn.apply(s.fn, s.fnArgs);\n\t  if (returnVal !== undefined) {\n\t    s(returnVal);\n\t  }\n\t  inStream = undefined;\n\t  if (s.depsChanged !== undefined) s.depsChanged = [];\n\t  s.shouldUpdate = false;\n\t  if (flushing === false) flushUpdate();\n\t}\n\t\n\t/**\n\t * @private\n\t * Update the dependencies of a stream\n\t * @param {stream} stream\n\t */\n\tfunction updateDeps(s) {\n\t  var i, o, list\n\t  var listeners = s.listeners;\n\t  for (i = 0; i < listeners.length; ++i) {\n\t    list = listeners[i];\n\t    if (list.end === s) {\n\t      endStream(list);\n\t    } else {\n\t      if (list.depsChanged !== undefined) list.depsChanged.push(s);\n\t      list.shouldUpdate = true;\n\t      findDeps(list);\n\t    }\n\t  }\n\t  for (; orderNextIdx >= 0; --orderNextIdx) {\n\t    o = order[orderNextIdx];\n\t    if (o.shouldUpdate === true) updateStream(o);\n\t    o.queued = false;\n\t  }\n\t}\n\t\n\t/**\n\t * @private\n\t * Add stream dependencies to the global `order` queue.\n\t * @param {stream} stream\n\t * @see updateDeps\n\t */\n\tfunction findDeps(s) {\n\t  var i\n\t  var listeners = s.listeners;\n\t  if (s.queued === false) {\n\t    s.queued = true;\n\t    for (i = 0; i < listeners.length; ++i) {\n\t      findDeps(listeners[i]);\n\t    }\n\t    order[++orderNextIdx] = s;\n\t  }\n\t}\n\t\n\t/**\n\t * @private\n\t */\n\tfunction flushUpdate() {\n\t  flushing = true;\n\t  while (toUpdate.length > 0) {\n\t    var s = toUpdate.shift();\n\t    if (s.vals.length > 0) s.val = s.vals.shift();\n\t    updateDeps(s);\n\t  }\n\t  flushing = false;\n\t}\n\t\n\t/**\n\t * @private\n\t * Push down a value into a stream\n\t * @param {stream} stream\n\t * @param {*} value\n\t */\n\tfunction updateStreamValue(s, n) {\n\t  if (n !== undefined && n !== null && isFunction(n.then)) {\n\t    n.then(s);\n\t    return;\n\t  }\n\t  s.val = n;\n\t  s.hasVal = true;\n\t  if (inStream === undefined) {\n\t    flushing = true;\n\t    updateDeps(s);\n\t    if (toUpdate.length > 0) flushUpdate(); else flushing = false;\n\t  } else if (inStream === s) {\n\t    markListeners(s, s.listeners);\n\t  } else {\n\t    s.vals.push(n);\n\t    toUpdate.push(s);\n\t  }\n\t}\n\t\n\t/**\n\t * @private\n\t */\n\tfunction markListeners(s, lists) {\n\t  var i, list;\n\t  for (i = 0; i < lists.length; ++i) {\n\t    list = lists[i];\n\t    if (list.end !== s) {\n\t      if (list.depsChanged !== undefined) {\n\t        list.depsChanged.push(s);\n\t      }\n\t      list.shouldUpdate = true;\n\t    } else {\n\t      endStream(list);\n\t    }\n\t  }\n\t}\n\t\n\t/**\n\t * @private\n\t * Add dependencies to a stream\n\t * @param {Array<stream>} dependencies\n\t * @param {stream} stream\n\t */\n\tfunction addListeners(deps, s) {\n\t  for (var i = 0; i < deps.length; ++i) {\n\t    deps[i].listeners.push(s);\n\t  }\n\t}\n\t\n\t/**\n\t * @private\n\t * Removes an stream from a dependency array\n\t * @param {stream} stream\n\t * @param {Array<stream>} dependencies\n\t */\n\tfunction removeListener(s, listeners) {\n\t  var idx = listeners.indexOf(s);\n\t  listeners[idx] = listeners[listeners.length - 1];\n\t  listeners.length--;\n\t}\n\t\n\t/**\n\t * @private\n\t * Detach a stream from its dependencies\n\t * @param {stream} stream\n\t */\n\tfunction detachDeps(s) {\n\t  for (var i = 0; i < s.deps.length; ++i) {\n\t    removeListener(s, s.deps[i].listeners);\n\t  }\n\t  s.deps.length = 0;\n\t}\n\t\n\t/**\n\t * @private\n\t * Ends a stream\n\t */\n\tfunction endStream(s) {\n\t  if (s.deps !== undefined) detachDeps(s);\n\t  if (s.end !== undefined) detachDeps(s.end);\n\t}\n\t\n\t/**\n\t * @private\n\t * transducer stream transformer\n\t */\n\tfunction StreamTransformer() { }\n\tStreamTransformer.prototype['@@transducer/init'] = function() { };\n\tStreamTransformer.prototype['@@transducer/result'] = function() { };\n\tStreamTransformer.prototype['@@transducer/step'] = function(s, v) { return v; };\n\t\n\tmodule.exports = flyd;\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar _arity = __webpack_require__(4);\n\tvar _curry1 = __webpack_require__(5);\n\tvar _curry2 = __webpack_require__(7);\n\tvar _curryN = __webpack_require__(8);\n\t\n\t\n\t/**\n\t * Returns a curried equivalent of the provided function, with the specified\n\t * arity. The curried function has two unusual capabilities. First, its\n\t * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the\n\t * following are equivalent:\n\t *\n\t *   - `g(1)(2)(3)`\n\t *   - `g(1)(2, 3)`\n\t *   - `g(1, 2)(3)`\n\t *   - `g(1, 2, 3)`\n\t *\n\t * Secondly, the special placeholder value `R.__` may be used to specify\n\t * \"gaps\", allowing partial application of any combination of arguments,\n\t * regardless of their positions. If `g` is as above and `_` is `R.__`, the\n\t * following are equivalent:\n\t *\n\t *   - `g(1, 2, 3)`\n\t *   - `g(_, 2, 3)(1)`\n\t *   - `g(_, _, 3)(1)(2)`\n\t *   - `g(_, _, 3)(1, 2)`\n\t *   - `g(_, 2)(1)(3)`\n\t *   - `g(_, 2)(1, 3)`\n\t *   - `g(_, 2)(_, 3)(1)`\n\t *\n\t * @func\n\t * @memberOf R\n\t * @since v0.5.0\n\t * @category Function\n\t * @sig Number -> (* -> a) -> (* -> a)\n\t * @param {Number} length The arity for the returned function.\n\t * @param {Function} fn The function to curry.\n\t * @return {Function} A new, curried function.\n\t * @see R.curry\n\t * @example\n\t *\n\t *      var sumArgs = (...args) => R.sum(args);\n\t *\n\t *      var curriedAddFourNumbers = R.curryN(4, sumArgs);\n\t *      var f = curriedAddFourNumbers(1, 2);\n\t *      var g = f(3);\n\t *      g(4); //=> 10\n\t */\n\tmodule.exports = _curry2(function curryN(length, fn) {\n\t  if (length === 1) {\n\t    return _curry1(fn);\n\t  }\n\t  return _arity(length, _curryN(length, [], fn));\n\t});\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function _arity(n, fn) {\n\t  /* eslint-disable no-unused-vars */\n\t  switch (n) {\n\t    case 0: return function() { return fn.apply(this, arguments); };\n\t    case 1: return function(a0) { return fn.apply(this, arguments); };\n\t    case 2: return function(a0, a1) { return fn.apply(this, arguments); };\n\t    case 3: return function(a0, a1, a2) { return fn.apply(this, arguments); };\n\t    case 4: return function(a0, a1, a2, a3) { return fn.apply(this, arguments); };\n\t    case 5: return function(a0, a1, a2, a3, a4) { return fn.apply(this, arguments); };\n\t    case 6: return function(a0, a1, a2, a3, a4, a5) { return fn.apply(this, arguments); };\n\t    case 7: return function(a0, a1, a2, a3, a4, a5, a6) { return fn.apply(this, arguments); };\n\t    case 8: return function(a0, a1, a2, a3, a4, a5, a6, a7) { return fn.apply(this, arguments); };\n\t    case 9: return function(a0, a1, a2, a3, a4, a5, a6, a7, a8) { return fn.apply(this, arguments); };\n\t    case 10: return function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) { return fn.apply(this, arguments); };\n\t    default: throw new Error('First argument to _arity must be a non-negative integer no greater than ten');\n\t  }\n\t};\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar _isPlaceholder = __webpack_require__(6);\n\t\n\t\n\t/**\n\t * Optimized internal one-arity curry function.\n\t *\n\t * @private\n\t * @category Function\n\t * @param {Function} fn The function to curry.\n\t * @return {Function} The curried function.\n\t */\n\tmodule.exports = function _curry1(fn) {\n\t  return function f1(a) {\n\t    if (arguments.length === 0 || _isPlaceholder(a)) {\n\t      return f1;\n\t    } else {\n\t      return fn.apply(this, arguments);\n\t    }\n\t  };\n\t};\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function _isPlaceholder(a) {\n\t  return a != null &&\n\t         typeof a === 'object' &&\n\t         a['@@functional/placeholder'] === true;\n\t};\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar _curry1 = __webpack_require__(5);\n\tvar _isPlaceholder = __webpack_require__(6);\n\t\n\t\n\t/**\n\t * Optimized internal two-arity curry function.\n\t *\n\t * @private\n\t * @category Function\n\t * @param {Function} fn The function to curry.\n\t * @return {Function} The curried function.\n\t */\n\tmodule.exports = function _curry2(fn) {\n\t  return function f2(a, b) {\n\t    switch (arguments.length) {\n\t      case 0:\n\t        return f2;\n\t      case 1:\n\t        return _isPlaceholder(a) ? f2\n\t             : _curry1(function(_b) { return fn(a, _b); });\n\t      default:\n\t        return _isPlaceholder(a) && _isPlaceholder(b) ? f2\n\t             : _isPlaceholder(a) ? _curry1(function(_a) { return fn(_a, b); })\n\t             : _isPlaceholder(b) ? _curry1(function(_b) { return fn(a, _b); })\n\t             : fn(a, b);\n\t    }\n\t  };\n\t};\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar _arity = __webpack_require__(4);\n\tvar _isPlaceholder = __webpack_require__(6);\n\t\n\t\n\t/**\n\t * Internal curryN function.\n\t *\n\t * @private\n\t * @category Function\n\t * @param {Number} length The arity of the curried function.\n\t * @param {Array} received An array of arguments received thus far.\n\t * @param {Function} fn The function to curry.\n\t * @return {Function} The curried function.\n\t */\n\tmodule.exports = function _curryN(length, received, fn) {\n\t  return function() {\n\t    var combined = [];\n\t    var argsIdx = 0;\n\t    var left = length;\n\t    var combinedIdx = 0;\n\t    while (combinedIdx < received.length || argsIdx < arguments.length) {\n\t      var result;\n\t      if (combinedIdx < received.length &&\n\t          (!_isPlaceholder(received[combinedIdx]) ||\n\t           argsIdx >= arguments.length)) {\n\t        result = received[combinedIdx];\n\t      } else {\n\t        result = arguments[argsIdx];\n\t        argsIdx += 1;\n\t      }\n\t      combined[combinedIdx] = result;\n\t      if (!_isPlaceholder(result)) {\n\t        left -= 1;\n\t      }\n\t      combinedIdx += 1;\n\t    }\n\t    return left <= 0 ? fn.apply(this, combined)\n\t                     : _arity(left, _curryN(length, combined, fn));\n\t  };\n\t};\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// meiosis.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 2e2fce801c63440f299a","export * from \"./meiosis\";\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts","/// <reference path=\"../lib/flyd.d.ts\" />\n\nimport * as flyd from \"flyd\";\n\nexport type Stream<T> = Flyd.Stream<T>;\nexport type Scanner<M, P> = Flyd.Scanner<M, P>;\nexport type Mapper<A, B> = Flyd.Mapper<A, B>;\n\nexport interface ScannerSpec<M, P> {\n  [name: string]: Scanner<M, P> | Scanner<M, P>;\n}\n\nexport interface MapperSpec<A, B> {\n  [name: string]: Mapper<A, B> | Mapper<A, B>;\n}\n\nexport interface NextAction<P> {\n  (model: any, proposal: P): void;\n}\n\nexport interface RunParameters<M, P> {\n  initialModel: M;\n  scanner: ScannerSpec<M, P>;\n  mappers?: Array<MapperSpec<any, any>>;\n  nextAction: NextAction<P>;\n  copy?: any;//FIXME\n}\n\nexport interface MeiosisRun<M, P> {\n  (params: RunParameters<M, P>): MeiosisApp;\n}\n\nexport interface MeiosisInstance<M, P> {\n  propose: Stream<P>;\n  run: MeiosisRun<M, P>;\n}\n\nexport interface MeiosisApp {\n  [key: string]: Stream<any>;\n}\n\ninterface NamedStream {\n  name: string;\n  stream: Stream<any>;\n}\n\ninterface NamedValue {\n  name: string;\n  value: any;\n}\n\nexport const {\n  combine,\n  map,\n  merge,\n  on,\n  scan,\n  stream\n} = flyd;\n\nconst getName = (value: any) => typeof value === \"function\" ? undefined : Object.keys(value)[0];\nconst getFn = (value: any) => {\n  const name = getName(value);\n  return name ? value[name] : value;\n};\n\nfunction newInstance<M, P>(): MeiosisInstance<M, P> {\n  const propose: Stream<P> = stream<P>();\n\n  const run = (params: RunParameters<M, P>): MeiosisApp => {\n    if (!params.initialModel || !params.scanner) {\n      throw new Error(\"Please specify initialModel and scanner.\");\n    }\n    const streams: MeiosisApp = {};\n    const allStreams: Array<NamedStream> = [];\n\n    const scanner: ScannerSpec<M, P> = params.scanner;\n    const scannerName: string = getName(scanner);\n    const scannerFn: Scanner<M, P> = getFn(scanner);\n\n    let lastStream: Stream<any> = scan(scannerFn, params.initialModel, propose);\n    const scannerStream = lastStream;\n    scannerName && (streams[scannerName] = lastStream);\n    allStreams.push({ name: (scannerName || \"\"), stream: lastStream });\n\n    (params.mappers || []).forEach(mapper => {\n      const mapperName: string = getName(mapper);\n      const mapperFn: Mapper<any, any> = getFn(mapper);\n\n      lastStream = map(mapperFn, lastStream);\n      mapperName && (streams[mapperName] = lastStream);\n      allStreams.push({ name: (mapperName || \"\"), stream: lastStream });\n    });\n\n    const render: Stream<any> = stream();\n\n    if (params.nextAction) {\n      let lastProposal: P = propose();\n\n      on((value: any) => {\n        const proposal: P = propose();\n\n        render(value);\n        if (proposal !== lastProposal) {\n          params.nextAction(value, proposal);\n        }\n        lastProposal = proposal;\n      }, lastStream);\n    }\n    else {\n      on(render, lastStream);\n    }\n\n    streams[\"render\"] = render;\n\n    const devtool: boolean = !!window;\n    if (devtool) {\n      const copy: any = params.copy || ((model: M) => JSON.parse(JSON.stringify(model)));\n      const bufferedValues: Array<any> = [];\n      let devtoolInitialized: boolean = false;\n      let lastProposal: P = propose();\n      const sendValues: Stream<boolean> = stream(true);\n\n      window.addEventListener(\"message\", evt => {\n        if (evt.data.type === \"MEIOSIS_RENDER_MODEL\") {\n          sendValues(evt.data.sendValuesBack);\n          scannerStream(evt.data.model);\n        }\n        else if (evt.data.type === \"MEIOSIS_TRACER_INIT\") {\n          devtoolInitialized = true;\n          bufferedValues.forEach(values => window.postMessage({ type: \"MEIOSIS_VALUES\", values }, \"*\"));\n        }\n      });\n\n      on(() => {\n        const proposal: P = propose();\n        const update: boolean = proposal !== lastProposal;\n        lastProposal = proposal;\n\n        const values: Array<NamedValue> = allStreams.map((namedStream: NamedStream) =>\n          ({ name: namedStream.name, value: copy(namedStream.stream()) }));\n        values.unshift({ name: \"proposal\", value: proposal });\n\n        if (sendValues()) {\n          if (devtoolInitialized) {\n            window.postMessage({ type: \"MEIOSIS_VALUES\", values, update }, \"*\");\n          }\n          else {\n            bufferedValues.push(values);\n          }\n        }\n      }, lastStream);\n    }\n\n    return streams;\n  };\n\n  return {\n    propose,\n    run\n  };\n}\n\nconst instance = newInstance<any, any>();\nconst propose = instance.propose;\nconst run = instance.run;\n\nexport {\n  newInstance,\n  propose,\n  run\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/meiosis.ts","'use strict';\n\nvar curryN = require('ramda/src/curryN');\n\n// Utility\nfunction isFunction(obj) {\n  return !!(obj && obj.constructor && obj.call && obj.apply);\n}\nfunction trueFn() { return true; }\n\n// Globals\nvar toUpdate = [];\nvar inStream;\nvar order = [];\nvar orderNextIdx = -1;\nvar flushing = false;\n\n/** @namespace */\nvar flyd = {}\n\n// /////////////////////////// API ///////////////////////////////// //\n\n/**\n * Creates a new stream\n *\n * __Signature__: `a -> Stream a`\n *\n * @name flyd.stream\n * @param {*} initialValue - (Optional) the initial value of the stream\n * @return {stream} the stream\n *\n * @example\n * var n = flyd.stream(1); // Stream with initial value `1`\n * var s = flyd.stream(); // Stream with no initial value\n */\nflyd.stream = function(initialValue) {\n  var endStream = createDependentStream([], trueFn);\n  var s = createStream();\n  s.end = endStream;\n  s.fnArgs = [];\n  endStream.listeners.push(s);\n  if (arguments.length > 0) s(initialValue);\n  return s;\n}\n\n/**\n * Create a new dependent stream\n *\n * __Signature__: `(...Stream * -> Stream b -> b) -> [Stream *] -> Stream b`\n *\n * @name flyd.combine\n * @param {Function} fn - the function used to combine the streams\n * @param {Array<stream>} dependencies - the streams that this one depends on\n * @return {stream} the dependent stream\n *\n * @example\n * var n1 = flyd.stream(0);\n * var n2 = flyd.stream(0);\n * var max = flyd.combine(function(n1, n2, self, changed) {\n *   return n1() > n2() ? n1() : n2();\n * }, [n1, n2]);\n */\nflyd.combine = curryN(2, combine);\nfunction combine(fn, streams) {\n  var i, s, deps, depEndStreams;\n  var endStream = createDependentStream([], trueFn);\n  deps = []; depEndStreams = [];\n  for (i = 0; i < streams.length; ++i) {\n    if (streams[i] !== undefined) {\n      deps.push(streams[i]);\n      if (streams[i].end !== undefined) depEndStreams.push(streams[i].end);\n    }\n  }\n  s = createDependentStream(deps, fn);\n  s.depsChanged = [];\n  s.fnArgs = s.deps.concat([s, s.depsChanged]);\n  s.end = endStream;\n  endStream.listeners.push(s);\n  addListeners(depEndStreams, endStream);\n  endStream.deps = depEndStreams;\n  updateStream(s);\n  return s;\n}\n\n/**\n * Returns `true` if the supplied argument is a Flyd stream and `false` otherwise.\n *\n * __Signature__: `* -> Boolean`\n *\n * @name flyd.isStream\n * @param {*} value - the value to test\n * @return {Boolean} `true` if is a Flyd streamn, `false` otherwise\n *\n * @example\n * var s = flyd.stream(1);\n * var n = 1;\n * flyd.isStream(s); //=> true\n * flyd.isStream(n); //=> false\n */\nflyd.isStream = function(stream) {\n  return isFunction(stream) && 'hasVal' in stream;\n}\n\n/**\n * Invokes the body (the function to calculate the value) of a dependent stream\n *\n * By default the body of a dependent stream is only called when all the streams\n * upon which it depends has a value. `immediate` can circumvent this behaviour.\n * It immediately invokes the body of a dependent stream.\n *\n * __Signature__: `Stream a -> Stream a`\n *\n * @name flyd.immediate\n * @param {stream} stream - the dependent stream\n * @return {stream} the same stream\n *\n * @example\n * var s = flyd.stream();\n * var hasItems = flyd.immediate(flyd.combine(function(s) {\n *   return s() !== undefined && s().length > 0;\n * }, [s]);\n * console.log(hasItems()); // logs `false`. Had `immediate` not been\n *                          // used `hasItems()` would've returned `undefined`\n * s([1]);\n * console.log(hasItems()); // logs `true`.\n * s([]);\n * console.log(hasItems()); // logs `false`.\n */\nflyd.immediate = function(s) {\n  if (s.depsMet === false) {\n    s.depsMet = true;\n    updateStream(s);\n  }\n  return s;\n}\n\n/**\n * Changes which `endsStream` should trigger the ending of `s`.\n *\n * __Signature__: `Stream a -> Stream b -> Stream b`\n *\n * @name flyd.endsOn\n * @param {stream} endStream - the stream to trigger the ending\n * @param {stream} stream - the stream to be ended by the endStream\n * @param {stream} the stream modified to be ended by endStream\n *\n * @example\n * var n = flyd.stream(1);\n * var killer = flyd.stream();\n * // `double` ends when `n` ends or when `killer` emits any value\n * var double = flyd.endsOn(flyd.merge(n.end, killer), flyd.combine(function(n) {\n *   return 2 * n();\n * }, [n]);\n*/\nflyd.endsOn = function(endS, s) {\n  detachDeps(s.end);\n  endS.listeners.push(s.end);\n  s.end.deps.push(endS);\n  return s;\n}\n\n/**\n * Map a stream\n *\n * Returns a new stream consisting of every value from `s` passed through\n * `fn`. I.e. `map` creates a new stream that listens to `s` and\n * applies `fn` to every new value.\n * __Signature__: `(a -> result) -> Stream a -> Stream result`\n *\n * @name flyd.map\n * @param {Function} fn - the function that produces the elements of the new stream\n * @param {stream} stream - the stream to map\n * @return {stream} a new stream with the mapped values\n *\n * @example\n * var numbers = flyd.stream(0);\n * var squaredNumbers = flyd.map(function(n) { return n*n; }, numbers);\n */\n// Library functions use self callback to accept (null, undefined) update triggers.\nflyd.map = curryN(2, function(f, s) {\n  return combine(function(s, self) { self(f(s.val)); }, [s]);\n})\n\n/**\n * Listen to stream events\n *\n * Similar to `map` except that the returned stream is empty. Use `on` for doing\n * side effects in reaction to stream changes. Use the returned stream only if you\n * need to manually end it.\n *\n * __Signature__: `(a -> result) -> Stream a -> Stream undefined`\n *\n * @name flyd.on\n * @param {Function} cb - the callback\n * @param {stream} stream - the stream\n * @return {stream} an empty stream (can be ended)\n */\nflyd.on = curryN(2, function(f, s) {\n  return combine(function(s) { f(s.val); }, [s]);\n})\n\n/**\n * Creates a new stream with the results of calling the function on every incoming\n * stream with and accumulator and the incoming value.\n *\n * __Signature__: `(a -> b -> a) -> a -> Stream b -> Stream a`\n *\n * @name flyd.scan\n * @param {Function} fn - the function to call\n * @param {*} val - the initial value of the accumulator\n * @param {stream} stream - the stream source\n * @return {stream} the new stream\n *\n * @example\n * var numbers = flyd.stream();\n * var sum = flyd.scan(function(sum, n) { return sum+n; }, 0, numbers);\n * numbers(2)(3)(5);\n * sum(); // 10\n */\nflyd.scan = curryN(3, function(f, acc, s) {\n  var ns = combine(function(s, self) {\n    self(acc = f(acc, s.val));\n  }, [s]);\n  if (!ns.hasVal) ns(acc);\n  return ns;\n});\n\n/**\n * Creates a new stream down which all values from both `stream1` and `stream2`\n * will be sent.\n *\n * __Signature__: `Stream a -> Stream a -> Stream a`\n *\n * @name flyd.merge\n * @param {stream} source1 - one stream to be merged\n * @param {stream} source2 - the other stream to be merged\n * @return {stream} a stream with the values from both sources\n *\n * @example\n * var btn1Clicks = flyd.stream();\n * button1Elm.addEventListener(btn1Clicks);\n * var btn2Clicks = flyd.stream();\n * button2Elm.addEventListener(btn2Clicks);\n * var allClicks = flyd.merge(btn1Clicks, btn2Clicks);\n */\nflyd.merge = curryN(2, function(s1, s2) {\n  var s = flyd.immediate(combine(function(s1, s2, self, changed) {\n    if (changed[0]) {\n      self(changed[0]());\n    } else if (s1.hasVal) {\n      self(s1.val);\n    } else if (s2.hasVal) {\n      self(s2.val);\n    }\n  }, [s1, s2]));\n  flyd.endsOn(combine(function() {\n    return true;\n  }, [s1.end, s2.end]), s);\n  return s;\n});\n\n/**\n * Creates a new stream resulting from applying `transducer` to `stream`.\n *\n * __Signature__: `Transducer -> Stream a -> Stream b`\n *\n * @name flyd.transduce\n * @param {Transducer} xform - the transducer transformation\n * @param {stream} source - the stream source\n * @return {stream} the new stream\n *\n * @example\n * var t = require('transducers.js');\n *\n * var results = [];\n * var s1 = flyd.stream();\n * var tx = t.compose(t.map(function(x) { return x * 2; }), t.dedupe());\n * var s2 = flyd.transduce(tx, s1);\n * flyd.combine(function(s2) { results.push(s2()); }, [s2]);\n * s1(1)(1)(2)(3)(3)(3)(4);\n * results; // => [2, 4, 6, 8]\n */\nflyd.transduce = curryN(2, function(xform, source) {\n  xform = xform(new StreamTransformer());\n  return combine(function(source, self) {\n    var res = xform['@@transducer/step'](undefined, source.val);\n    if (res && res['@@transducer/reduced'] === true) {\n      self.end(true);\n      return res['@@transducer/value'];\n    } else {\n      return res;\n    }\n  }, [source]);\n});\n\n/**\n * Returns `fn` curried to `n`. Use this function to curry functions exposed by\n * modules for Flyd.\n *\n * @name flyd.curryN\n * @function\n * @param {Integer} arity - the function arity\n * @param {Function} fn - the function to curry\n * @return {Function} the curried function\n *\n * @example\n * function add(x, y) { return x + y; };\n * var a = flyd.curryN(2, add);\n * a(2)(4) // => 6\n */\nflyd.curryN = curryN\n\n/**\n * Returns a new stream identical to the original except every\n * value will be passed through `f`.\n *\n * _Note:_ This function is included in order to support the fantasy land\n * specification.\n *\n * __Signature__: Called bound to `Stream a`: `(a -> b) -> Stream b`\n *\n * @name stream.map\n * @param {Function} function - the function to apply\n * @return {stream} a new stream with the values mapped\n *\n * @example\n * var numbers = flyd.stream(0);\n * var squaredNumbers = numbers.map(function(n) { return n*n; });\n */\nfunction boundMap(f) { return flyd.map(f, this); }\n\n/**\n * Returns a new stream which is the result of applying the\n * functions from `this` stream to the values in `stream` parameter.\n *\n * `this` stream must be a stream of functions.\n *\n * _Note:_ This function is included in order to support the fantasy land\n * specification.\n *\n * __Signature__: Called bound to `Stream (a -> b)`: `a -> Stream b`\n *\n * @name stream.ap\n * @param {stream} stream - the values stream\n * @return {stream} a new stram with the functions applied to values\n *\n * @example\n * var add = flyd.curryN(2, function(x, y) { return x + y; });\n * var numbers1 = flyd.stream();\n * var numbers2 = flyd.stream();\n * var addToNumbers1 = flyd.map(add, numbers1);\n * var added = addToNumbers1.ap(numbers2);\n */\nfunction ap(s2) {\n  var s1 = this;\n  return combine(function(s1, s2, self) { self(s1.val(s2.val)); }, [s1, s2]);\n}\n\n/**\n * Get a human readable view of a stream\n * @name stream.toString\n * @return {String} the stream string representation\n */\nfunction streamToString() {\n  return 'stream(' + this.val + ')';\n}\n\n/**\n * @name stream.end\n * @memberof stream\n * A stream that emits `true` when the stream ends. If `true` is pushed down the\n * stream the parent stream ends.\n */\n\n/**\n * @name stream.of\n * @function\n * @memberof stream\n * Returns a new stream with `value` as its initial value. It is identical to\n * calling `flyd.stream` with one argument.\n *\n * __Signature__: Called bound to `Stream (a)`: `b -> Stream b`\n *\n * @param {*} value - the initial value\n * @return {stream} the new stream\n *\n * @example\n * var n = flyd.stream(1);\n * var m = n.of(1);\n */\n\n// /////////////////////////// PRIVATE ///////////////////////////////// //\n/**\n * @private\n * Create a stream with no dependencies and no value\n * @return {Function} a flyd stream\n */\nfunction createStream() {\n  function s(n) {\n    if (arguments.length === 0) return s.val\n    updateStreamValue(s, n)\n    return s\n  }\n  s.hasVal = false;\n  s.val = undefined;\n  s.vals = [];\n  s.listeners = [];\n  s.queued = false;\n  s.end = undefined;\n  s.map = boundMap;\n  s.ap = ap;\n  s.of = flyd.stream;\n  s.toString = streamToString;\n  return s;\n}\n\n/**\n * @private\n * Create a dependent stream\n * @param {Array<stream>} dependencies - an array of the streams\n * @param {Function} fn - the function used to calculate the new stream value\n * from the dependencies\n * @return {stream} the created stream\n */\nfunction createDependentStream(deps, fn) {\n  var s = createStream();\n  s.fn = fn;\n  s.deps = deps;\n  s.depsMet = false;\n  s.depsChanged = deps.length > 0 ? [] : undefined;\n  s.shouldUpdate = false;\n  addListeners(deps, s);\n  return s;\n}\n\n/**\n * @private\n * Check if all the dependencies have values\n * @param {stream} stream - the stream to check depencencies from\n * @return {Boolean} `true` if all dependencies have vales, `false` otherwise\n */\nfunction initialDepsNotMet(stream) {\n  stream.depsMet = stream.deps.every(function(s) {\n    return s.hasVal;\n  });\n  return !stream.depsMet;\n}\n\n/**\n * @private\n * Update a dependent stream using its dependencies in an atomic way\n * @param {stream} stream - the stream to update\n */\nfunction updateStream(s) {\n  if ((s.depsMet !== true && initialDepsNotMet(s)) ||\n      (s.end !== undefined && s.end.val === true)) return;\n  if (inStream !== undefined) {\n    toUpdate.push(s);\n    return;\n  }\n  inStream = s;\n  if (s.depsChanged) s.fnArgs[s.fnArgs.length - 1] = s.depsChanged;\n  var returnVal = s.fn.apply(s.fn, s.fnArgs);\n  if (returnVal !== undefined) {\n    s(returnVal);\n  }\n  inStream = undefined;\n  if (s.depsChanged !== undefined) s.depsChanged = [];\n  s.shouldUpdate = false;\n  if (flushing === false) flushUpdate();\n}\n\n/**\n * @private\n * Update the dependencies of a stream\n * @param {stream} stream\n */\nfunction updateDeps(s) {\n  var i, o, list\n  var listeners = s.listeners;\n  for (i = 0; i < listeners.length; ++i) {\n    list = listeners[i];\n    if (list.end === s) {\n      endStream(list);\n    } else {\n      if (list.depsChanged !== undefined) list.depsChanged.push(s);\n      list.shouldUpdate = true;\n      findDeps(list);\n    }\n  }\n  for (; orderNextIdx >= 0; --orderNextIdx) {\n    o = order[orderNextIdx];\n    if (o.shouldUpdate === true) updateStream(o);\n    o.queued = false;\n  }\n}\n\n/**\n * @private\n * Add stream dependencies to the global `order` queue.\n * @param {stream} stream\n * @see updateDeps\n */\nfunction findDeps(s) {\n  var i\n  var listeners = s.listeners;\n  if (s.queued === false) {\n    s.queued = true;\n    for (i = 0; i < listeners.length; ++i) {\n      findDeps(listeners[i]);\n    }\n    order[++orderNextIdx] = s;\n  }\n}\n\n/**\n * @private\n */\nfunction flushUpdate() {\n  flushing = true;\n  while (toUpdate.length > 0) {\n    var s = toUpdate.shift();\n    if (s.vals.length > 0) s.val = s.vals.shift();\n    updateDeps(s);\n  }\n  flushing = false;\n}\n\n/**\n * @private\n * Push down a value into a stream\n * @param {stream} stream\n * @param {*} value\n */\nfunction updateStreamValue(s, n) {\n  if (n !== undefined && n !== null && isFunction(n.then)) {\n    n.then(s);\n    return;\n  }\n  s.val = n;\n  s.hasVal = true;\n  if (inStream === undefined) {\n    flushing = true;\n    updateDeps(s);\n    if (toUpdate.length > 0) flushUpdate(); else flushing = false;\n  } else if (inStream === s) {\n    markListeners(s, s.listeners);\n  } else {\n    s.vals.push(n);\n    toUpdate.push(s);\n  }\n}\n\n/**\n * @private\n */\nfunction markListeners(s, lists) {\n  var i, list;\n  for (i = 0; i < lists.length; ++i) {\n    list = lists[i];\n    if (list.end !== s) {\n      if (list.depsChanged !== undefined) {\n        list.depsChanged.push(s);\n      }\n      list.shouldUpdate = true;\n    } else {\n      endStream(list);\n    }\n  }\n}\n\n/**\n * @private\n * Add dependencies to a stream\n * @param {Array<stream>} dependencies\n * @param {stream} stream\n */\nfunction addListeners(deps, s) {\n  for (var i = 0; i < deps.length; ++i) {\n    deps[i].listeners.push(s);\n  }\n}\n\n/**\n * @private\n * Removes an stream from a dependency array\n * @param {stream} stream\n * @param {Array<stream>} dependencies\n */\nfunction removeListener(s, listeners) {\n  var idx = listeners.indexOf(s);\n  listeners[idx] = listeners[listeners.length - 1];\n  listeners.length--;\n}\n\n/**\n * @private\n * Detach a stream from its dependencies\n * @param {stream} stream\n */\nfunction detachDeps(s) {\n  for (var i = 0; i < s.deps.length; ++i) {\n    removeListener(s, s.deps[i].listeners);\n  }\n  s.deps.length = 0;\n}\n\n/**\n * @private\n * Ends a stream\n */\nfunction endStream(s) {\n  if (s.deps !== undefined) detachDeps(s);\n  if (s.end !== undefined) detachDeps(s.end);\n}\n\n/**\n * @private\n * transducer stream transformer\n */\nfunction StreamTransformer() { }\nStreamTransformer.prototype['@@transducer/init'] = function() { };\nStreamTransformer.prototype['@@transducer/result'] = function() { };\nStreamTransformer.prototype['@@transducer/step'] = function(s, v) { return v; };\n\nmodule.exports = flyd;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/flyd/lib/index.js\n// module id = 2\n// module chunks = 0","var _arity = require('./internal/_arity');\nvar _curry1 = require('./internal/_curry1');\nvar _curry2 = require('./internal/_curry2');\nvar _curryN = require('./internal/_curryN');\n\n\n/**\n * Returns a curried equivalent of the provided function, with the specified\n * arity. The curried function has two unusual capabilities. First, its\n * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value `R.__` may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is `R.__`, the\n * following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.5.0\n * @category Function\n * @sig Number -> (* -> a) -> (* -> a)\n * @param {Number} length The arity for the returned function.\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curry\n * @example\n *\n *      var sumArgs = (...args) => R.sum(args);\n *\n *      var curriedAddFourNumbers = R.curryN(4, sumArgs);\n *      var f = curriedAddFourNumbers(1, 2);\n *      var g = f(3);\n *      g(4); //=> 10\n */\nmodule.exports = _curry2(function curryN(length, fn) {\n  if (length === 1) {\n    return _curry1(fn);\n  }\n  return _arity(length, _curryN(length, [], fn));\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/curryN.js\n// module id = 3\n// module chunks = 0","module.exports = function _arity(n, fn) {\n  /* eslint-disable no-unused-vars */\n  switch (n) {\n    case 0: return function() { return fn.apply(this, arguments); };\n    case 1: return function(a0) { return fn.apply(this, arguments); };\n    case 2: return function(a0, a1) { return fn.apply(this, arguments); };\n    case 3: return function(a0, a1, a2) { return fn.apply(this, arguments); };\n    case 4: return function(a0, a1, a2, a3) { return fn.apply(this, arguments); };\n    case 5: return function(a0, a1, a2, a3, a4) { return fn.apply(this, arguments); };\n    case 6: return function(a0, a1, a2, a3, a4, a5) { return fn.apply(this, arguments); };\n    case 7: return function(a0, a1, a2, a3, a4, a5, a6) { return fn.apply(this, arguments); };\n    case 8: return function(a0, a1, a2, a3, a4, a5, a6, a7) { return fn.apply(this, arguments); };\n    case 9: return function(a0, a1, a2, a3, a4, a5, a6, a7, a8) { return fn.apply(this, arguments); };\n    case 10: return function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) { return fn.apply(this, arguments); };\n    default: throw new Error('First argument to _arity must be a non-negative integer no greater than ten');\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_arity.js\n// module id = 4\n// module chunks = 0","var _isPlaceholder = require('./_isPlaceholder');\n\n\n/**\n * Optimized internal one-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nmodule.exports = function _curry1(fn) {\n  return function f1(a) {\n    if (arguments.length === 0 || _isPlaceholder(a)) {\n      return f1;\n    } else {\n      return fn.apply(this, arguments);\n    }\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_curry1.js\n// module id = 5\n// module chunks = 0","module.exports = function _isPlaceholder(a) {\n  return a != null &&\n         typeof a === 'object' &&\n         a['@@functional/placeholder'] === true;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_isPlaceholder.js\n// module id = 6\n// module chunks = 0","var _curry1 = require('./_curry1');\nvar _isPlaceholder = require('./_isPlaceholder');\n\n\n/**\n * Optimized internal two-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nmodule.exports = function _curry2(fn) {\n  return function f2(a, b) {\n    switch (arguments.length) {\n      case 0:\n        return f2;\n      case 1:\n        return _isPlaceholder(a) ? f2\n             : _curry1(function(_b) { return fn(a, _b); });\n      default:\n        return _isPlaceholder(a) && _isPlaceholder(b) ? f2\n             : _isPlaceholder(a) ? _curry1(function(_a) { return fn(_a, b); })\n             : _isPlaceholder(b) ? _curry1(function(_b) { return fn(a, _b); })\n             : fn(a, b);\n    }\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_curry2.js\n// module id = 7\n// module chunks = 0","var _arity = require('./_arity');\nvar _isPlaceholder = require('./_isPlaceholder');\n\n\n/**\n * Internal curryN function.\n *\n * @private\n * @category Function\n * @param {Number} length The arity of the curried function.\n * @param {Array} received An array of arguments received thus far.\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nmodule.exports = function _curryN(length, received, fn) {\n  return function() {\n    var combined = [];\n    var argsIdx = 0;\n    var left = length;\n    var combinedIdx = 0;\n    while (combinedIdx < received.length || argsIdx < arguments.length) {\n      var result;\n      if (combinedIdx < received.length &&\n          (!_isPlaceholder(received[combinedIdx]) ||\n           argsIdx >= arguments.length)) {\n        result = received[combinedIdx];\n      } else {\n        result = arguments[argsIdx];\n        argsIdx += 1;\n      }\n      combined[combinedIdx] = result;\n      if (!_isPlaceholder(result)) {\n        left -= 1;\n      }\n      combinedIdx += 1;\n    }\n    return left <= 0 ? fn.apply(this, combined)\n                     : _arity(left, _curryN(length, combined, fn));\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ramda/src/internal/_curryN.js\n// module id = 8\n// module chunks = 0"],"sourceRoot":""}